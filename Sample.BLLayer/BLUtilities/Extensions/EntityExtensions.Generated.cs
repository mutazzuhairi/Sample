//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Sample Team Tools.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.Extensions.DependencyInjection;
using Sample.BLLayer.Mapping;
using Sample.BLLayer.QueryServices;
using Sample.BLLayer.UpdateServices;
using Sample.BLLayer.Validating;
using Sample.DataLayer.Data.Repositries;
using Sample.DataLayer.Data.Repositries.Interfaces;
using Sample.BLLayer.Mapping.Interfaces;
using Sample.BLLayer.QueryServices.Interfaces;
using Sample.BLLayer.UpdateServices.Interfaces;
using Sample.BLLayer.Validating.Interfaces;

namespace Sample.BLLayer.BLUtilities.Extensions
{
 
    public static class EntityExtensions
    {

        public static void AddEntityServicesToConfigure(this IServiceCollection services)
        {
            AddRepositriesToScope(services);
            AddMappingToScope(services);
            AddValidatingToScope(services);
            AddQueryServicesToScope(services);
            AddUpdateServicesToScope(services);
        }

        private static void AddRepositriesToScope(IServiceCollection services)
        {

           services.AddScoped<IRoleRepositry, RoleRepositry>();
           services.AddScoped<IRoleClaimRepositry, RoleClaimRepositry>();
           services.AddScoped<IUserRepositry, UserRepositry>();
           services.AddScoped<IUserClaimRepositry, UserClaimRepositry>();
           services.AddScoped<IUserLoginRepositry, UserLoginRepositry>();
           services.AddScoped<IUserRoleRepositry, UserRoleRepositry>();
           services.AddScoped<IUserTokenRepositry, UserTokenRepositry>();
       
        }

        private static void AddValidatingToScope(IServiceCollection services)
        {

           services.AddScoped<IRoleValidating, RoleValidating>();
           services.AddScoped<IRoleClaimValidating, RoleClaimValidating>();
           services.AddScoped<IUserValidating, UserValidating>();
           services.AddScoped<IUserClaimValidating, UserClaimValidating>();
           services.AddScoped<IUserLoginValidating, UserLoginValidating>();
           services.AddScoped<IUserRoleValidating, UserRoleValidating>();
           services.AddScoped<IUserTokenValidating, UserTokenValidating>();
       
        }

        private static void AddMappingToScope(IServiceCollection services)
        {

           services.AddScoped<IRoleMapping, RoleMapping>();
           services.AddScoped<IRoleClaimMapping, RoleClaimMapping>();
           services.AddScoped<IUserMapping, UserMapping>();
           services.AddScoped<IUserClaimMapping, UserClaimMapping>();
           services.AddScoped<IUserLoginMapping, UserLoginMapping>();
           services.AddScoped<IUserRoleMapping, UserRoleMapping>();
           services.AddScoped<IUserTokenMapping, UserTokenMapping>();
       
        }

        private static void AddUpdateServicesToScope(IServiceCollection services)
        {

           services.AddScoped<IRoleUpdateService, RoleUpdateService>();
           services.AddScoped<IRoleClaimUpdateService, RoleClaimUpdateService>();
           services.AddScoped<IUserUpdateService, UserUpdateService>();
           services.AddScoped<IUserClaimUpdateService, UserClaimUpdateService>();
           services.AddScoped<IUserLoginUpdateService, UserLoginUpdateService>();
           services.AddScoped<IUserRoleUpdateService, UserRoleUpdateService>();
           services.AddScoped<IUserTokenUpdateService, UserTokenUpdateService>();
       
        }

        private static void AddQueryServicesToScope(IServiceCollection services)
        {

           services.AddScoped<IRoleQueryService, RoleQueryService>();
           services.AddScoped<IRoleClaimQueryService, RoleClaimQueryService>();
           services.AddScoped<IUserQueryService, UserQueryService>();
           services.AddScoped<IUserClaimQueryService, UserClaimQueryService>();
           services.AddScoped<IUserLoginQueryService, UserLoginQueryService>();
           services.AddScoped<IUserRoleQueryService, UserRoleQueryService>();
           services.AddScoped<IUserTokenQueryService, UserTokenQueryService>();
       
        }
    }
}
