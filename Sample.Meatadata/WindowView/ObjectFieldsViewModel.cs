using System.Collections.Generic;
using System.Windows;
using System.Text;
using System.ComponentModel.DataAnnotations;
using Sample.Meatadata.MetadataUtilities.HelperClasses;
using Microsoft.Toolkit.Mvvm.Input;
using Sample.Meatadata.MetadataUtilities.SystemConstants;
using Sample.AutoGenerated.GeneratedUtilities.SystemConstants;
using System;
using System.Text.RegularExpressions;
using System.Linq;
using System.IO;

namespace Sample.Meatadata.WindowView
{
    public class ObjectFieldsViewModel : PropertyChangedImplementation
    {
        const string Alphabet = AutoGeneratedConstatnts.Other.ALPHABET;
        public List<string> DataTypesList { get; set; } = MetadataConstatnts.Types.META_DATA_TYPES_List;
        public List<string> BaseEntityProperties { get; set; } = AutoGeneratedConstatnts.SystemList.BASE_ENTITY_PROPERTIES;
        public ObjectTableViewModel ViewModel { get; set; }
        public ObjectFieldsViewModel(ObjectTableViewModel model, bool isNew)
        {
            this.ViewModel = model;
            FirePropertyChanged("DataTypesList");
            FirePropertyChanged("FieldDataType");
            if (isNew)
            {
                ButtonsVisibility = Visibility.Visible;
            }
            else
            {
                ButtonsVisibility = Visibility.Collapsed;
            }
        }
        public Visibility ButtonsVisibility { get; set; }
        public string Id { get; set; }

        string fieldName;
        [Required(ErrorMessage = "Field 'FieldName' is required.")]
        public string FieldName
        {
            get { return fieldName; }
            set { fieldName = value; IsChecked = true; FirePropertyChanged("FieldName"); }
        } 

		string oldfieldName;
        public string OldFieldName
        {
            get { return oldfieldName; }
            set { oldfieldName = value; FirePropertyChanged("OldFieldName");}
        } 

        bool isPrimaryKey;
        public bool IsPrimaryKey
        {
            get { return isPrimaryKey; }
            set { InitializeDataAfterChangeIsPrimaryKey(value); }
        }
        private void InitializeDataAfterChangeIsPrimaryKey(bool primaryKey)
        {
            isPrimaryKey = primaryKey;
            IsChecked = true;
            if (primaryKey)
            {
                IsRequired = null;
                IsNullable = null;
                uniqueField = null;
                hasIndex = null;
            }
            else
            {
                IsRequired = false;
                IsNullable = false;
                uniqueField = false;
                hasIndex = false;
            }
            FirePropertyChanged("IsPrimaryKey");
            FirePropertyChanged("IsPrimaryKeyVisibility");
        }

        bool oldisPrimaryKey;
        public bool OldIsPrimaryKey
        {
            get { return oldisPrimaryKey; }
            set { oldisPrimaryKey = value; FirePropertyChanged("OldIsPrimaryKey"); }
        }

        bool? isNullable = false;
        public bool? IsNullable
        {
            get { return isNullable; }
            set { isNullable = value; IsChecked = true; FirePropertyChanged("IsNullable"); }
        }

        bool oldisNullable;
        public bool OldIsNullable
        {
            get { return oldisNullable; }
            set { oldisNullable = value; FirePropertyChanged("OldIsNullable"); }
        }

        bool noObjectField;
        public bool NoObjectField
        {
            get { return noObjectField; }
            set { noObjectField = value; FirePropertyChanged("NoObjectField"); }
        } 

        string fieldDataType = AutoGeneratedConstatnts.MetaDataTypes.TEXT;
        public string FieldDataType
        {
            get { return fieldDataType; }
            set
            {
                InitializeDataAfterChangeFieldDataType(value);
            }
        }

        private void InitializeDataAfterChangeFieldDataType(string dataType)
        {
            fieldDataType = dataType;
            IsChecked = true;
            if (fieldDataType == AutoGeneratedConstatnts.MetaDataTypes.DOUBLE ||
                fieldDataType == AutoGeneratedConstatnts.MetaDataTypes.DECIMAL)
            {
                NumberOfDigits = 18;
                DigitsAfterPoint = 2;
            }
            else
            {
                NumberOfDigits = null;
                DigitsAfterPoint = null;
            }
            if (fieldDataType == AutoGeneratedConstatnts.MetaDataTypes.TEXT ||
                fieldDataType == AutoGeneratedConstatnts.MetaDataTypes.N_TEXT)
            {
                MinLength = 0;
                MaxLength = 255;
            }
            else
            {
                MinLength = null;
                MaxLength = null;
            }
            FirePropertyChanged("FieldDataType");
            FirePropertyChanged("DoubleVisibility");
            FirePropertyChanged("LookUpVisibility");
            FirePropertyChanged("StringVisibility");
            FirePropertyChanged("IsMaxLengthVisibility");
        }


        string oldfieldDataType;
        public string OldFieldDataType
        {
            get { return oldfieldDataType; }
            set { oldfieldDataType = value; FirePropertyChanged("OldFieldDataType"); }
        }

        string lookUpTableName;
        public string LookUpTableName
        {
            get { return lookUpTableName; }
            set { lookUpTableName = value; FirePropertyChanged("LookUpTableName"); }
        }

        int? minLength = 0;
        public int? MinLength
        {
            get { return minLength; }
            set { minLength = value; FirePropertyChanged("MinLength"); }
        }

        int? maxLength = 255;
        public int? MaxLength
        {
            get { return maxLength; }
            set { maxLength = value; IsChecked = true; FirePropertyChanged("MaxLength"); }
        }

        bool? isMaxLength = false;
        public bool? IsMaxLength
        {
            get { return isMaxLength; }
            set { InitializeDataAfterChangeisMaxLength(value); }
        }

        private void InitializeDataAfterChangeisMaxLength(bool? maxLength)
        {
            isMaxLength = maxLength; 
            IsChecked = true;
            if (isMaxLength == true)
            {
                MaxLength = null;
                MinLength = null;
            }
            else
            {
                MaxLength = 255;
                MinLength = 0;
            }
            FirePropertyChanged("IsMaxLength");
            FirePropertyChanged("IsMaxLengthVisibility");
        }

        bool? isRequired  = false;
        public bool? IsRequired
        {
            get { return isRequired; }
            set { isRequired = value; FirePropertyChanged("IsRequired"); }
        }  
        bool isViewField = true;

        public bool IsViewField
        {
            get { return isViewField; }
            set { isViewField = value; FirePropertyChanged("IsViewField"); }
        }  

        bool isChecked;
        public bool IsChecked
        {
            get { return isChecked; }
            set { isChecked = value; FirePropertyChanged("IsChecked"); }
        }

        bool isDeleted;
        public bool IsDeleted
        {
            get { return isDeleted; }
            set { isDeleted = value; FirePropertyChanged("IsDeleted"); }
        }

        bool isNew;
        public bool IsNew
        {
            get { return isNew; }
            set { isNew = value; FirePropertyChanged("IsNew"); }
        }

        bool? uniqueField = false;
        public bool? UniqueField
        {
            get { return uniqueField; }
            set { uniqueField = value; FirePropertyChanged("UniqueField"); }
        }

        bool? hasIndex = false;
        public bool? HasIndex
        {
            get { return hasIndex; }
            set { hasIndex = value; FirePropertyChanged("HasIndex"); }
        }

        bool isIncludeInSearchFieldsEnabled = true;
        public bool IsIncludeInSearchFieldsEnabled
        {
            get { return isIncludeInSearchFieldsEnabled; }
            set { isIncludeInSearchFieldsEnabled = value; FirePropertyChanged("IsIncludeInSearchFieldsEnabled"); }
        }    

        int? digitsAfterPoint;
        public int? DigitsAfterPoint
        {
            get { return digitsAfterPoint; }
            set { digitsAfterPoint = value; IsChecked = true; FirePropertyChanged("DigitsAfterPoint"); }
        }

        int? numberOfDigits;
        public int? NumberOfDigits
        {
            get { return numberOfDigits; }
            set { numberOfDigits = value; IsChecked = true; FirePropertyChanged("NumberOfDigits"); }
        }

        bool inActive;
        public bool InActive
        {
            get { return inActive; }
            set { inActive = value; FirePropertyChanged("InActive"); }
        }   

        string defaultText;
        public string DefaultText
        {
            get { return defaultText; }
            set { defaultText = value; FirePropertyChanged("DefaultText"); }
        }

        string defaultValue;
        public string DefaultValue
        {
            get { return defaultValue; }
            set { defaultValue = value; FirePropertyChanged("DefaultValue"); }
        }

        string localDefaultText;
        public string LocalDefaultText
        {
            get { return localDefaultText; }
            set { localDefaultText = value; FirePropertyChanged("LocalDefaultText"); }
        }  

        string descriptionDefaultText;
        public string DescriptionDefaultText
        {
            get { return descriptionDefaultText; }
            set { descriptionDefaultText = value; FirePropertyChanged("DescriptionDefaultText"); }
        }

        string descriptionLocalDefaultText;
        public string DescriptionLocalDefaultText
        {
            get { return descriptionLocalDefaultText; }
            set { descriptionLocalDefaultText = value; FirePropertyChanged("DescriptionLocalDefaultText"); }
        }  

        bool isForeignKey;
        public bool IsForeignKey
        {
            get { return isForeignKey; }
            set { isForeignKey = value; FirePropertyChanged("IsForeignKey"); FirePropertyChanged("ForeignEntityFontWeight"); }
        }

        string foreignEntity;
        public string ForeignEntity
        {
            get { return foreignEntity; }
            set { foreignEntity = value; FirePropertyChanged("ForeignEntity"); }
        }

        string navigationPropertyName;
        public string NavigationPropertyName
        {
            get { return navigationPropertyName; }
            set { navigationPropertyName = value; FirePropertyChanged("NavigationPropertyName"); }
        }

        public string ForeignEntityFontWeight
        {
            get
            {
                string result = "Normal";
                if (IsForeignKey)
                {
                    result = "Bold";
                }
                return result;
            }
            set { }
        }

        public bool IsDBFieldEnabled
        {
            get
            {
                bool result = false;
                if (IsDBField)
                {
                    result = true;
                }
                return result;
            }
            set { }
        }

        bool isDBField = true;
        public bool IsDBField
        {
            get { return isDBField; }
            set { isDBField = value; FirePropertyChanged("IsDBField"); FirePropertyChanged("IsDBFieldEnabled"); }
        }

        bool isDTOField = true;
        public bool IsDTOField
        {
            get { return isDTOField; }
            set { isDTOField = value; FirePropertyChanged("IsDTOField"); }
        }

        private bool includeInSearchField = true;
        public bool IncludeInSearchField
        {
            get 
            {
                return includeInSearchField;
            }
            set 
            {
                includeInSearchField = value;
                FirePropertyChanged("IncludeInSearchField");
            }
        } 
        public Visibility StringVisibility
        {
            get
            {
                Visibility result = Visibility.Collapsed;
                if (FieldDataType == AutoGeneratedConstatnts.MetaDataTypes.LOOKUP ||
                    FieldDataType == AutoGeneratedConstatnts.MetaDataTypes.TEXT || 
                    FieldDataType == AutoGeneratedConstatnts.MetaDataTypes.N_TEXT)
                {
                    result = Visibility.Visible;
                }
                return result;
            }
            set { }
        }
        public Visibility IsMaxLengthVisibility
        {
            get
            {
                Visibility result = Visibility.Collapsed;
                if ((IsMaxLength == null || IsMaxLength == false) && 
                    (FieldDataType == AutoGeneratedConstatnts.MetaDataTypes.LOOKUP ||
                    FieldDataType == AutoGeneratedConstatnts.MetaDataTypes.TEXT ||
                    FieldDataType == AutoGeneratedConstatnts.MetaDataTypes.N_TEXT))
                {
                    result = Visibility.Visible;
                }
                return result;
            }
            set { }
        }

        public Visibility DoubleVisibility
        {
            get
            {
                Visibility result = Visibility.Collapsed;
                if (FieldDataType == AutoGeneratedConstatnts.MetaDataTypes.DECIMAL || 
                    FieldDataType == AutoGeneratedConstatnts.MetaDataTypes.DOUBLE)
                {
                    result = Visibility.Visible;
                }
                return result;
            }
            set { }
        } 

        public Visibility LookUpVisibility
        {
            get
            {
                Visibility result = Visibility.Collapsed;
                if (FieldDataType == AutoGeneratedConstatnts.MetaDataTypes.LOOKUP)
                {
                    result = Visibility.Visible;
                }
                return result;
            }
            set { }
        } 

        public Visibility IsPrimaryKeyVisibility
        {
            get
            {
                Visibility result = Visibility.Collapsed;
                if (!isPrimaryKey)
                {
                    result = Visibility.Visible;
                }
                return result;
            }
            set { }
        }

        public int OpjectFieldLength
        {
            get;
            set;
        }

        public string ErrorMessages { get; set; }

        Visibility errorsVisibility = Visibility.Collapsed;
        public Visibility ErrorsVisibility
        {
            get { return errorsVisibility; }
            set { errorsVisibility = value; FirePropertyChanged("ErrorsVisibility"); }
        }

        public RelayCommand OkBtnCommand
        {
            get { return new RelayCommand(() => this.OkBtnMethod()); }
        }

        public RelayCommand CancelBtnCommand
        {
            get { return new RelayCommand(() => this.CancelBtnMethod()); }
        }

        private void CancelBtnMethod()
        {
            ViewModel.NewWindow.Close();
        }

        private void OkBtnMethod()
        {
            ErrorsVisibility = Visibility.Collapsed;
            ErrorMessages = string.Empty;
            if (FieldName.Length > 30)
            {
                ErrorMessages = "FieldName Shouldn't be more than 30 char. ..";
                FirePropertyChanged("ErrorMessages");
                ErrorsVisibility = Visibility.Visible; 
            }
            else
            {
                this.ValidateEntries();

                if (ErrorMessages == "")
                {
                    this.IsNew = true;
                    this.IsChecked = true;
                    ButtonsVisibility = Visibility.Collapsed;
                    ViewModel.UpdateObjectTableFieldsList(this);
                    ViewModel.NewWindow.Close();
                }
            } 
        }

        private void ValidateEntries()
        {
            StringBuilder str = new StringBuilder();
            if (string.IsNullOrEmpty(FieldName))
            {
                str.AppendLine("Field Name is Required.");
            }
            else if (!Alphabet.Any(c => char.ToLower(c) == char.ToLower(FieldName[0])))
            {
                str.AppendLine("Field Name couldn't start with number or speial Char.");
            }
            else if (BaseEntityProperties.Any(s=>s.Equals(FieldName)))
            {
                str.AppendLine("Field Name already exist in Base Type Properties");
            }
            else if (ViewModel.ObjectTableFieldsList.Any(s => s.FieldName.Equals(FieldName)))
            {
                str.AppendLine("Field Name already exist in Entity.");
            }
            else if (ViewModel.ObjectTableFieldsList.Any(s => s.NavigationPropertyName == FieldName))
            {
                str.AppendLine("There is a Navigation Property Name in the Entity that has the same name with the Field Name.");
            }
            else if (FieldName.Length > 30)
            {
                str.AppendLine("Field Name couldn't be more than 30 char.");
            }
            if (string.IsNullOrEmpty(FieldDataType))
            {
                str.AppendLine("Data Type is Required.");
            }
            else
            {
                if (FieldDataType == "Text" || FieldDataType == "nText" || FieldDataType == "LookUp")
                {
                    if (IsMaxLength == false)
                    {
                        if (MinLength < 0)
                        {
                            str.AppendLine("Max Length is can't be less than zero.");
                        }
                        if (MaxLength == null)
                        {
                            str.AppendLine("Max Length is Required.");
                        }
                        else if (MaxLength <= 0)
                        {
                            str.AppendLine("Max Length is can't be zero or less.");
                        }
                    }
                }
                if (FieldDataType == "Decimal" || FieldDataType == "Double" || FieldDataType == "SigDouble" || FieldDataType == "UnsDecimal")
                {
                    if (string.IsNullOrEmpty(NumberOfDigits?.ToString()))
                    {
                        str.AppendLine("Number Of Digits is Required.");
                    }
                    if (string.IsNullOrEmpty(DigitsAfterPoint?.ToString()))
                    {
                        str.AppendLine("Digits After Point is Required");
                    }
                }
                if (FieldDataType == "LookUp")
                {
                    if (string.IsNullOrEmpty(LookUpTableName))
                    {
                        str.AppendLine("Look Up Table Name is Required.");
                    }
                    else
                    {
                        var entityFiles = Directory.EnumerateFiles("../../Sample.BLLayer/EntityFiles", "*.fxml");
                        bool isLookUpTableNameExist = false;
                        foreach (string file in entityFiles)
                        {
                            var fileNameWithExtension = file.Substring(file.IndexOf("\\") + "\\".Length);
                            var fileName = fileNameWithExtension.Substring(0, fileNameWithExtension.Length - ".fxml".Length);
                            if (fileName == LookUpTableName)
                            {
                                isLookUpTableNameExist = true;
                                break;
                            }
                        }
                        if (!isLookUpTableNameExist)
                        {
                            str.AppendLine("there's no Look Up entity with name " + LookUpTableName + ".");
                        }
                    }
                }
                if (FieldDataType != "LookUp")
                {
                    LookUpTableName = null;
                }
            }  
            if (IsForeignKey)
            {
                if (string.IsNullOrEmpty(ForeignEntity))
                {
                    str.AppendLine("Foreign Entity is Required.");
                }
                else
                {
                    var entityFiles = Directory.EnumerateFiles("../../Sample.BLLayer/EntityFiles", "*.fxml");
                    bool isForeignEntityExist = false;
                    foreach (string file in entityFiles)
                    {
                        var fileNameWithExtension = file.Substring(file.IndexOf("\\") + "\\".Length);
                        var fileName = fileNameWithExtension.Substring(0, fileNameWithExtension.Length - ".fxml".Length);
                        if (fileName == ForeignEntity)
                        {
                            isForeignEntityExist = true;
                            break;
                        }
                    }
                    if (!isForeignEntityExist)
                    {
                        str.AppendLine("there's no foreign entity with name " + ForeignEntity + ".");
                    }
                }
                if (string.IsNullOrEmpty(NavigationPropertyName))
                {
                    str.AppendLine("Navigation Property Name is Required.");
                }
                else if (NavigationPropertyName == FieldName)
                {
                    str.AppendLine("Navigation Property Name cannot be the same with Field Name");
                }
                else if (ViewModel.ObjectTableFieldsList.Any(s => s.FieldName == NavigationPropertyName))
                {
                    str.AppendLine("There is a Field Name in the Entity that has the same name with the Navigation Property Name.");
                }
                else if (ViewModel.ObjectTableFieldsList.Any(s => s.NavigationPropertyName == NavigationPropertyName && s.ForeignEntity != ForeignEntity))
                {
                    str.AppendLine("Navigation Property Name already exist in Entity with different ForeignEntity.");
                }
            }
            ErrorMessages = str.ToString();
            if (ErrorMessages != "")
            {
                ErrorsVisibility = Visibility.Visible;
            }
            else
            {
                ErrorsVisibility = Visibility.Collapsed;
            }

            FirePropertyChanged("ErrorMessages");
        }

    }
}
