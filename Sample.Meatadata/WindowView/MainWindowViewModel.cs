using System;
using System.Linq;
using System.Windows;
using System.Collections.Generic;
using Sample.DataLayer.DataUtilities.Abstractions;
using Sample.Meatadata.MetadataUtilities.HelperClasses;
using Microsoft.Toolkit.Mvvm.Input;
using Sample.Meatadata.MetadataUtilities.SystemConstants;
using Sample.AutoGenerated.GeneratedUtilities.SystemConstants;

namespace Sample.Meatadata.WindowView
{
    public class MainWindowViewModel : PropertyChangedImplementation
    {
        const string Alphabet = AutoGeneratedConstatnts.Other.ALPHABET;
        public List<string> BaseTypesList { get; set; } = MetadataConstatnts.Types.BASE_TYPES_LIST;
        public List<string> BaseIdTypesList { get; set; } = MetadataConstatnts.Types.BASE_ID_TYPES_LIST;
        public List<string> BaseEntityProperties { get; set; } = AutoGeneratedConstatnts.SystemList.BASE_ENTITY_PROPERTIES;
        public List<string> IBaseEntityProperties { get; set; } = AutoGeneratedConstatnts.SystemList.IBASE_ENTITY_PROPERTIES;
        public ObjectTableViewModel NewObjectTable { get; set; } = new ObjectTableViewModel();
        public static ObjectTableControl CurrentControl { get; set; }

        string tableName;
        public string TableName
        {
            get
            {
                return tableName;
            }
            set
            {
                tableName = value;
                FirePropertyChanged("ObjectTableName");
            }
        }
        public bool isCodeChecked;
        public bool IsCodeChecked
        {
            get
            {
                return isCodeChecked;
            }
            set
            {
                isCodeChecked = value;
                FirePropertyChanged("IsCodeChecked");
            }
        }
        public bool isNameChecked = true;
        public bool IsNameChecked
        {
            get
            {
                return isNameChecked;
            }
            set
            {
                isNameChecked = value;
                FirePropertyChanged("IsNameChecked");
            }
        }
        public bool isLocalNameChecked = true;
        public bool IsLocalNameChecked
        {
            get
            {
                return isLocalNameChecked;
            }
            set
            {
                isLocalNameChecked = value;
                FirePropertyChanged("IsLocalNameChecked");
            }
        }
        public bool isDescriptionChecked = true;
        public bool IsDescriptionChecked
        {
            get
            {
                return isDescriptionChecked;
            }
            set
            {
                isDescriptionChecked = value;
                FirePropertyChanged("IsDescriptionChecked");
            }
        }
        public bool isLocalDescriptionChecked = true;
        public bool IsLocalDescriptionChecked
        {
            get
            {
                return isLocalDescriptionChecked;
            }
            set
            {
                isLocalDescriptionChecked = value;
                FirePropertyChanged("IsLocalDescriptionChecked");
            }
        }

        string baseIdType = AutoGeneratedConstatnts.MetaDataTypes.LONG;
        public string BaseIdType
        {
            get { return baseIdType; }
            set { baseIdType = value; FirePropertyChanged("BaseIdType"); }
        }

        string baseType = AutoGeneratedConstatnts.BaseTypes.BASEENTITY;
        public string BaseType
        {
            get { return baseType; }
            set { baseType = value; 
                  FirePropertyChanged("BaseType"); 
                  FirePropertyChanged("BaseTypeVisibility");
                  FirePropertyChanged("IBaseTypeVisibility");
                }
        }

        bool isBaseIdPrimaryKey = true;
        public bool IsBaseIdPrimaryKey
        {
            get { return isBaseIdPrimaryKey; }
            set { isBaseIdPrimaryKey = value; FirePropertyChanged("IsBaseIdPrimaryKey"); }
        }

        public RelayCommand OkBtnCommand
        {
            get { return new RelayCommand(() => this.OkBtnMethod()); }
        }

        private void OkBtnMethod()
        {
            ErrorMessages = "";
            if (string.IsNullOrEmpty(TableName))
            {
                ErrorMessages = "Table name is required.";
                ErrorsVisibility = Visibility.Visible;
            }
            else if (string.IsNullOrEmpty(BaseType))
            {
                ErrorMessages = "Base Type is required.";
                ErrorsVisibility = Visibility.Visible;
            }
            else if (string.IsNullOrEmpty(BaseIdType))
            {
                ErrorMessages = "Base Id Type is required.";
                ErrorsVisibility = Visibility.Visible;
            }
            else if (TableName.Length > 30)
            {
                ErrorMessages = "Table name should be less than or equal 30.";
                ErrorsVisibility = Visibility.Visible;
            }
            else if (!Alphabet.Any(c => char.ToLower(c) == char.ToLower(TableName[0])))
            {
                ErrorMessages = "Table name couldn't start with number or speial Char.";
                ErrorsVisibility = Visibility.Visible;
            }
            else
            {
                NewObjectTable.TableName = TableName;
                NewObjectTable.IsNew = true;
                NewObjectTable.BaseType = BaseType;
                NewObjectTable.BaseIdType = BaseIdType;
                NewObjectTable.IsBaseIdPrimaryKey = IsBaseIdPrimaryKey;
                AddCheckedPropertiesToNewObjectTable();
                CurrentControl = new ObjectTableControl();
                CurrentControl.DataContext = NewObjectTable;
                CurrentControl.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                CurrentControl.WindowState = WindowState.Maximized;
                CurrentControl.Show();
                CurrentControl.Closed += CurrentControl_Closed;
                App.MainControl.Hide();
            }
        }

        private void AddCheckedPropertiesToNewObjectTable()
        {
            if (IsCodeChecked)
            {
                var propObjectField = new ObjectFieldsViewModel(NewObjectTable, true);
                propObjectField.FieldName = "Code";
                propObjectField.DefaultText = "Code";
                propObjectField.LocalDefaultText = "الرمز";
                propObjectField.FieldDataType = "Text";
                propObjectField.MaxLength = 50;
                propObjectField.IsPrimaryKey = true;
                propObjectField.IsRequired = true;
                propObjectField.IsDBField = true;
                propObjectField.IsViewField = true;
                propObjectField.IsDTOField = true;
                NewObjectTable.UpdateObjectTableFieldsList(propObjectField);
            }
            if (IsNameChecked)
            {
                var propObjectField = new ObjectFieldsViewModel(NewObjectTable, true);
                propObjectField.FieldName = "Name";
                propObjectField.DefaultText = "Name";
                propObjectField.LocalDefaultText = "الاسم";
                propObjectField.FieldDataType = "Text";
                propObjectField.MaxLength = 100;
                propObjectField.IsRequired = true;
                propObjectField.IsDBField = true;
                propObjectField.IsViewField = true;
                propObjectField.IsDTOField = true;
                NewObjectTable.UpdateObjectTableFieldsList(propObjectField);
            }
            if (IsLocalNameChecked)
            {
                var propObjectField = new ObjectFieldsViewModel(NewObjectTable, true);
                propObjectField.FieldName = "LocalName";
                propObjectField.DefaultText = "Local Name";
                propObjectField.LocalDefaultText = "الاسم";
                propObjectField.FieldDataType = "nText";
                propObjectField.MaxLength = 100;
                propObjectField.IsDBField = true;
                propObjectField.IsViewField = true;
                propObjectField.IsDTOField = true;
                NewObjectTable.UpdateObjectTableFieldsList(propObjectField);
            }
            if (IsDescriptionChecked)
            {
                var propObjectField = new ObjectFieldsViewModel(NewObjectTable, true);
                propObjectField.FieldName = "Description";
                propObjectField.DefaultText = "Description";
                propObjectField.LocalDefaultText = "الوصف";
                propObjectField.FieldDataType = "Text";
                propObjectField.IsMaxLength = true;
                propObjectField.IsDBField = true;
                propObjectField.IsViewField = true;
                propObjectField.IsDTOField = true;
                NewObjectTable.UpdateObjectTableFieldsList(propObjectField);
            }
            if (IsLocalDescriptionChecked)
            {
                var propObjectField = new ObjectFieldsViewModel(NewObjectTable, true);
                propObjectField.FieldName = "LocalDescription";
                propObjectField.DefaultText = "Local Description";
                propObjectField.LocalDefaultText = "الوصف";
                propObjectField.FieldDataType = "nText";
                propObjectField.IsMaxLength = true;
                propObjectField.IsDBField = true;
                propObjectField.IsViewField = true;
                propObjectField.IsDTOField = true;
                NewObjectTable.UpdateObjectTableFieldsList(propObjectField);
            }
        }
        void CurrentControl_Closed(object sender, EventArgs e)
        {
            Environment.Exit(0);
        }

        Visibility errorsVisibility = Visibility.Collapsed;
        public Visibility ErrorsVisibility
        {
            get { return errorsVisibility; }
            set { errorsVisibility = value; FirePropertyChanged("ErrorsVisibility"); }
        }

        public string errorMessages;
        public string ErrorMessages
        {
            get
            {
                return errorMessages;
            }
            set
            {
                errorMessages = value;
                FirePropertyChanged("ErrorMessages");
            }
        }

        public Visibility BaseTypeVisibility
        {
            get
            {
                Visibility result = Visibility.Collapsed;
                if (BaseType == AutoGeneratedConstatnts.BaseTypes.BASEENTITY)
                {
                    result = Visibility.Visible;
                }
                return result;
            }
            set { }
        }

        public Visibility IBaseTypeVisibility
        {
            get
            {
                Visibility result = Visibility.Collapsed;
                if (BaseType == AutoGeneratedConstatnts.BaseTypes.IBASEENTITY)
                {
                    result = Visibility.Visible;
                }
                return result;
            }
            set { }
        }
    }
}
