<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="Sample.AutoGenerated.HelperClasses" #>
<#@ import namespace="Sample.AutoGenerated.GeneratedUtilities.SystemConstants" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Sample Team Tools.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Sample.DataLayer.Data.Models.Entities;
using Sample.DataLayer.Data.Configuration;
using Sample.DataLayer.DataUtilities.Extensions;

namespace <#= NameSpace #>
{
 
    public sealed class <#= ContextName #> : IdentityDbContext
    {
        
        public <#= ContextName #> (DbContextOptions<<#= ContextName #>> options) : base(options)
        {

            this.ChangeTracker.LazyLoadingEnabled = false;
            this.ChangeTracker.AutoDetectChangesEnabled = false;
            this.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;

        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.AddRestrictToRelationshipOnDelete();
            <# foreach (string file in EntityFiles) { #>
<# XDocument fxmlFile = null;
   try
   {
      fxmlFile = XDocument.Load(file);
   }
   catch (Exception)
   {
      continue;
   } #>
<# if(bool.Parse(fxmlFile.Root.Attribute("InActive").Value)) { continue; }#>
modelBuilder.ApplyConfiguration(new  <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #><#= EntityConfigurationConvention #>());
            <# } #>

        } 

       <# foreach (string file in EntityFiles) { #>
<# XDocument fxmlFile = null;
   try
   {
      fxmlFile = XDocument.Load(file);
   }
   catch (Exception)
   {
      continue;
   } #>
<# if(bool.Parse(fxmlFile.Root.Attribute("InActive").Value)) { continue; }#>
<# if (AutoGeneratedConstatnts.IdentityEntities.IDENTITY_ENTITIES_LIST.Contains(fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty))) { #>
 public override DbSet<<#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>> <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty).Pluralize() #> { get; set; }
<# } else { #>
 public DbSet<<#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>> <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty).Pluralize() #> { get; set; }
<# } #>
       <# } #>

    }
}

