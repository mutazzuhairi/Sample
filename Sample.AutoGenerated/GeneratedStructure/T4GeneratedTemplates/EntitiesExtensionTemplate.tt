<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="Sample.AutoGenerated.HelperClasses" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Sample Team Tools.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.Extensions.DependencyInjection;
using Sample.BLLayer.Mapping;
using Sample.BLLayer.QueryServices;
using Sample.BLLayer.UpdateServices;
using Sample.BLLayer.Validating;
using Sample.DataLayer.Data.Repositries;
using Sample.DataLayer.Data.Repositries.Interfaces;
using Sample.BLLayer.Mapping.Interfaces;
using Sample.BLLayer.QueryServices.Interfaces;
using Sample.BLLayer.UpdateServices.Interfaces;
using Sample.BLLayer.Validating.Interfaces;

namespace <#= NameSpace #>
{
 
    public static class <#= ExtensiontName #>
    {

        public static void AddEntityServicesToConfigure(this IServiceCollection services)
        {
            AddRepositriesToScope(services);
            AddMappingToScope(services);
            AddValidatingToScope(services);
            AddQueryServicesToScope(services);
            AddUpdateServicesToScope(services);
        }

        private static void AddRepositriesToScope(IServiceCollection services)
        {

       <# foreach (string file in EntityFiles) { #>
<# XDocument fxmlFile = null;
   try
   {
      fxmlFile = XDocument.Load(file);
   }
   catch (Exception)
   {
      continue;
   } #>
<# if(bool.Parse(fxmlFile.Root.Attribute("InActive").Value)) { continue; }#>
    services.AddScoped<I<#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>Repositry, <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>Repositry>();
       <# } #>

        }

        private static void AddValidatingToScope(IServiceCollection services)
        {

       <# foreach (string file in EntityFiles) { #>
<# XDocument fxmlFile = null;
   try
   {
      fxmlFile = XDocument.Load(file);
   }
   catch (Exception)
   {
      continue;
   } #>
<# if(bool.Parse(fxmlFile.Root.Attribute("InActive").Value)) { continue; }#>
    services.AddScoped<I<#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>Validating, <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>Validating>();
       <# } #>

        }

        private static void AddMappingToScope(IServiceCollection services)
        {

       <# foreach (string file in EntityFiles) { #>
<# XDocument fxmlFile = null;
   try
   {
      fxmlFile = XDocument.Load(file);
   }
   catch (Exception)
   {
      continue;
   } #>
<# if(bool.Parse(fxmlFile.Root.Attribute("InActive").Value)) { continue; }#>
    services.AddScoped<I<#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>Mapping, <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>Mapping>();
       <# } #>

        }

        private static void AddUpdateServicesToScope(IServiceCollection services)
        {

       <# foreach (string file in EntityFiles) { #>
<# XDocument fxmlFile = null;
   try
   {
      fxmlFile = XDocument.Load(file);
   }
   catch (Exception)
   {
      continue;
   } #>
<# if(bool.Parse(fxmlFile.Root.Attribute("InActive").Value)) { continue; }#>
    services.AddScoped<I<#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>UpdateService, <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>UpdateService>();
       <# } #>

        }

        private static void AddQueryServicesToScope(IServiceCollection services)
        {

       <# foreach (string file in EntityFiles) { #>
<# XDocument fxmlFile = null;
   try
   {
      fxmlFile = XDocument.Load(file);
   }
   catch (Exception)
   {
      continue;
   } #>
<# if(bool.Parse(fxmlFile.Root.Attribute("InActive").Value)) { continue; }#>
    services.AddScoped<I<#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>QueryService, <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>QueryService>();
       <# } #>

        }
    }
}
