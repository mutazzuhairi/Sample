<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="Sample.AutoGenerated.HelperClasses" #>
<#@ import namespace="Sample.AutoGenerated.GeneratedUtilities.SystemConstants" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Sample Team Tools.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Sample.DataLayer.DataUtilities.Abstractions;
using Sample.DataLayer.DataUtilities.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace <#= NameSpace #>
{

    <#= Table.Properties.GetHeaderIndex(Table.Name, Table.TableAttributes) #>
    public partial class <#= Table.Name #> : <#= Table.BaseType #><<#= Table.IdType #>>
    {
<# if(Table.BaseType == "BaseEntity") { #>
<# if(Table.IsBaseIdPrimaryKey) { #>
         [Key]
<# } #>
         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
<# if(Table.IdType == AutoGeneratedConstatnts.SystemTypes.STRING) { #>
         [Column(Order = 0, TypeName = "varchar")]
<# } #>
<# else { #>
         [Column(Order = 0)]
<# } #>
         public override <#= Table.IdType #> Id { get; set; }
<# } #>
<# foreach (var property in Table.Properties) { #>
<# if(bool.Parse(property.Attribute("InActive").Value)) { continue; }#>
<# if(bool.Parse(property.Attribute("IsDBField").Value)) { #>
         <#= property.GetAttributes(Table.EntityFiles) #>
         public <#= property.CSharpTypeName(null, Table.EntityFiles) #> <#= property.Attribute("FieldName").Value.Replace("\"", string.Empty) #> { get; set; }
<# } #><# } #>
<# var foreignKeys = Table.Properties.Where(s => bool.Parse(s.Attribute("InActive").Value) == false && bool.Parse(s.Attribute("IsDBField").Value) == true && bool.Parse(s.Attribute("IsForeignKey").Value) == true)
                                  .GroupBy(s=> s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) +"_" +s.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty)).ToList();
var foreignKeysList = (from a in foreignKeys
                       select new XElement(a.Key, new XAttribute("ForeignEntity", a.Select(s=> s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty)).FirstOrDefault()),
                          new XAttribute("NavigationPropertyName", a.Select(s => s.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty)).FirstOrDefault()),
                          new XAttribute("FieldName", string.Join(", ", a.Select(s => s.Attribute("FieldName").Value.Replace("\"", string.Empty)).ToList())))).ToList();
foreach (var property in foreignKeysList) { #>
         [ForeignKey(<#= "nameof(" + string.Join(") + \",\" + nameof(", property.Attribute("FieldName").Value.Split(',').ToList()) + ")" #>)]
         [InverseProperty(nameof(<#= NameSpace #>.<#= property.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) #>.<#= Table.Name #><#= property.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty) #>))]
         public virtual <#= property.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) #> <#= property.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty) #> { get; set; }
<# } #>
<# foreach (string file in Table.EntityFiles) { #>
<# XDocument fxmlFile = null; 
try { fxmlFile = XDocument.Load(file); 
if(bool.Parse(fxmlFile.Root.Attributes().Where(s => s.Name == "InActive").FirstOrDefault().Value)) { continue; } 
var tableProperties = fxmlFile.Root.Elements("field")?.Where(s=> bool.Parse(s.Attribute("IsForeignKey").Value) && s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) == Table.Name);
var foreignKeysMulti = tableProperties.Where(s => bool.Parse(s.Attribute("InActive").Value) == false && bool.Parse(s.Attribute("IsDBField").Value) == true && bool.Parse(s.Attribute("IsForeignKey").Value) == true)
                                  .GroupBy(s=> s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) +"_" +s.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty)).ToList();
var foreignKeysMultiList = (from a in foreignKeysMulti
                       select new XElement(a.Key, new XAttribute("ForeignEntity", a.Select(s=> s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty)).FirstOrDefault()),
                          new XAttribute("NavigationPropertyName", a.Select(s => s.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty)).FirstOrDefault()),
                          new XAttribute("FieldName", string.Join(", ", a.Select(s => s.Attribute("FieldName").Value.Replace("\"", string.Empty)).ToList())))).ToList();
foreach (var prop in foreignKeysMultiList) { #>
         [InverseProperty(nameof(<#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>.<#= prop.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty) #>))]
         public virtual ICollection<<#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>> <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #><#= prop.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty) #> { get; set; }
<# } #><#} 
catch (Exception) { continue; } #>
<# } #>    
    }
}