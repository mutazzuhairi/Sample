<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Sample.AutoGenerated.HelperClasses" #>
<#@ output extension=".cs" #>
using System.Text;
using Sample.BLLayer.EntityDTOs;
using Sample.DataLayer.Data.Models.Entities;
using Sample.BLLayer.Mapping.Interfaces;
using Sample.BLLayer.BLUtilities.Abstractions;

namespace <#= NameSpace #>
{
 
    public partial class <#= Table.Name #>Mapping : EntityMapping<<#= Table.Name #>, <#= Table.Name #>DTO, <#= Table.IdType #>>, I<#= Table.Name #>Mapping
    {
        public override <#= Table.Name #> MapEntity(<#= Table.Name #> entity, 
                                  <#= Table.Name #>DTO entityDTO,
                                  bool isNewEntity)
        {
            <#= Table.Name #>MapEntity(entity, entityDTO, isNewEntity);
            MapSearchField(entityDTO);
            entity = base.MapEntity(entity, entityDTO, isNewEntity);
            return entity;
        }

        private void MapSearchField(<#= Table.Name #>DTO entityDTO)
        {
            StringBuilder stringBuilder = new StringBuilder();
<# foreach (var property in Table.Properties) { #>
<# if(bool.Parse(property.Attribute("InActive").Value)) { continue; }#>
<# if(!bool.Parse(property.Attribute("IsDTOField").Value)) { continue; }#>
<# if(!bool.Parse(property.Attribute("IncludeInSearchField").Value)) { continue; }#>
            if(entityDTO?.<#= property.Attribute("FieldName").Value.Replace("\"", string.Empty) #> != null)
                stringBuilder.Append(entityDTO.<#= property.Attribute("FieldName").Value.Replace("\"", string.Empty) #>.ToString() + ", ");
<# } #>
            if(!string.IsNullOrEmpty(stringBuilder?.ToString()) && stringBuilder.Length > 0)
                entityDTO.SearchField = stringBuilder.ToString();
        }

    }

}


