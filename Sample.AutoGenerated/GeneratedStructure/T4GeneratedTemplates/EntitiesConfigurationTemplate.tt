<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Sample.AutoGenerated.HelperClasses" #>
<#@ import namespace="Sample.AutoGenerated.GeneratedUtilities.SystemConstants" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Sample Team Tools.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Sample.DataLayer.Data.Models.Entities;
using Sample.DataLayer.DataUtilities.Abstractions;

namespace <#= NameSpace #>
{
 
    public partial class <#= Table.Name #>Configuration : BaseEntityTypeConfiguration<<#= Table.Name #>, <#= Table.IdType #>> 
    {
        public override void Configure(EntityTypeBuilder<<#= Table.Name #>> builder)
        {
            <#= Table.Name #>Configure(builder);
<# var primaryKeys = Table.Properties.Where(s=> bool.Parse(s.Attribute("InActive").Value) == false && bool.Parse(s.Attribute("IsDBField").Value) == true && bool.Parse(s.Attribute("IsPrimaryKey").Value) == true).ToList();
if(primaryKeys.Count > 1) {  #>
            builder.HasKey(p => new { p.<#=string.Join(", p.", primaryKeys.Select(S=>S.Attribute("FieldName").Value.Replace("\"", string.Empty)).ToList()) #> });
<# } #>
       <# foreach (var property in Table.Properties) { #>
<# if(bool.Parse(property.Attribute("InActive").Value)) { continue; }#>
<# if(!bool.Parse(property.Attribute("IsDBField").Value)) { continue; }#>
<# if(property.Attribute("FieldDataType").Value.Replace("\"", string.Empty) == AutoGeneratedConstatnts.MetaDataTypes.N_TEXT) { #>
     builder.Property(e => e.<#= property.Attribute("FieldName").Value.Replace("\"", string.Empty) #>).IsUnicode();
       <# } #>
<# if(property.Attribute("FieldDataType").Value.Replace("\"", string.Empty).ConverteCSharpGeniricTypeToCamelCase(property, Table.EntityFiles) == AutoGeneratedConstatnts.SystemTypes.DOUBLE || property.Attribute("FieldDataType").Value.Replace("\"", string.Empty).ConverteCSharpGeniricTypeToCamelCase(property, Table.EntityFiles) == AutoGeneratedConstatnts.SystemTypes.DECIMAL) { #>
     builder.Property(e => e.<#= property.Attribute("FieldName").Value.Replace("\"", string.Empty) #>).HasPrecision(<#= int.Parse(property.Attribute("NumberOfDigits").Value) #>, <#= int.Parse(property.Attribute("DigitsAfterPoint").Value) #>);
       <# } #>
<# if(!string.IsNullOrEmpty(property.Attribute("DefaultValue")?.Value?.Replace("\"", string.Empty))) { #>
     builder.Property(e => e.<#= property.Attribute("FieldName").Value.Replace("\"", string.Empty) #>).HasDefaultValueSql(<#= property.Attribute("DefaultValue").Value #>);
       <# } #><# } #>
     base.Configure(builder);
        }
    }

}




