<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="Sample.AutoGenerated.HelperClasses" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Sample Team Tools.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<# var foreignKeysImported = Table.Properties.Where(s => bool.Parse(s.Attribute("InActive").Value) == false && bool.Parse(s.Attribute("IsDBField").Value) == true && bool.Parse(s.Attribute("IsForeignKey").Value) == true)
                                  .GroupBy(s=> s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) +"_" +s.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty)).ToList();
var foreignKeysImportedList = (from a in foreignKeysImported
                       select new XElement(a.Key, new XAttribute("ForeignEntity", a.Select(s=> s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty)).FirstOrDefault()),
                          new XAttribute("NavigationPropertyName", a.Select(s => s.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty)).FirstOrDefault()),
                          new XAttribute("FieldName", string.Join(", ", a.Select(s => s.Attribute("FieldName").Value.Replace("\"", string.Empty)).ToList())))).ToList();
var importingList = new System.Collections.Generic.List<string>();
foreach (var property in foreignKeysImportedList) {
if (importingList.Contains(property.Attribute("ForeignEntity").Value.Replace("\"", string.Empty))) { continue; }
if (property.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) == Table.Name) { continue; }
importingList.Add(property.Attribute("ForeignEntity").Value.Replace("\"", string.Empty));#>
import { <#= property.Attribute("ForeignEntity").Value.Replace("\"", string.Empty)+"View" #> } from "./<#= property.Attribute("ForeignEntity").Value.Replace("\"", string.Empty).SplitByCapital()+".view.model" #>";
<# } #>
import { BaseModel } from "../../extends/base-model.model";
<# foreach (string file in Table.EntityFiles) { #>
<# XDocument fxmlFile = null; 
try { fxmlFile = XDocument.Load(file); 
if(bool.Parse(fxmlFile.Root.Attributes().Where(s => s.Name == "InActive").FirstOrDefault().Value)) { continue; } 
var tableProperties = fxmlFile.Root.Elements("field")?.Where(s=> bool.Parse(s.Attribute("IsForeignKey").Value) && s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) == Table.Name);
var foreignKeysMulti = tableProperties.Where(s => bool.Parse(s.Attribute("InActive").Value) == false && bool.Parse(s.Attribute("IsDBField").Value) == true && bool.Parse(s.Attribute("IsForeignKey").Value) == true)
                                  .GroupBy(s=> s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) +"_" +s.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty)).ToList();
var foreignKeysMultiList = (from a in foreignKeysMulti
                       select new XElement(a.Key, new XAttribute("ForeignEntity", a.Select(s=> s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty)).FirstOrDefault()),
                          new XAttribute("NavigationPropertyName", a.Select(s => s.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty)).FirstOrDefault()),
                          new XAttribute("FieldName", string.Join(", ", a.Select(s => s.Attribute("FieldName").Value.Replace("\"", string.Empty)).ToList())))).ToList();
if (foreignKeysMulti != null && foreignKeysMulti.Count > 0 && fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) != Table.Name) {
if (!importingList.Contains(fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty))) { 
importingList.Add(fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty));#>
import { <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>View } from "./<#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty).SplitByCapital()+".view.model" #>";
<# } } #><#} 
catch (Exception) { continue; } #>
<# } #> 
export class <#= Table.Name #>View extends BaseModel<<#= Table.IdTypeSciptType #>> {
<# foreach (var property in Table.Properties) { #>
<# if(bool.Parse(property.Attribute("InActive").Value)) { continue; }#>
<# if(bool.Parse(property.Attribute("IsViewField").Value)) { #>
    
    private <#= property.Attribute("FieldName").Value.Replace("\"", string.Empty).FirstCharToLowerCase() #> : <#= property.TypeScriptTypeName("View", Table.EntityFiles) #>;
    get <#= property.Attribute("FieldName").Value.Replace("\"", string.Empty) #>(): <#= property.TypeScriptTypeName("View", Table.EntityFiles) #> { return this.<#= property.Attribute("FieldName").Value.Replace("\"", string.Empty).FirstCharToLowerCase() #>; }
    set <#= property.Attribute("FieldName").Value.Replace("\"", string.Empty) #>(val: <#= property.TypeScriptTypeName("View", Table.EntityFiles) #>) { this.<#= property.Attribute("FieldName").Value.Replace("\"", string.Empty).FirstCharToLowerCase() #> = val; }
<# } #><# } #> <# var foreignKeys = Table.Properties.Where(s => bool.Parse(s.Attribute("InActive").Value) == false && bool.Parse(s.Attribute("IsDBField").Value) == true && bool.Parse(s.Attribute("IsForeignKey").Value) == true)
                                  .GroupBy(s=> s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) +"_" +s.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty)).ToList();
var foreignKeysList = (from a in foreignKeys
                       select new XElement(a.Key, new XAttribute("ForeignEntity", a.Select(s=> s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty)).FirstOrDefault()),
                          new XAttribute("NavigationPropertyName", a.Select(s => s.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty)).FirstOrDefault()),
                          new XAttribute("FieldName", string.Join(", ", a.Select(s => s.Attribute("FieldName").Value.Replace("\"", string.Empty)).ToList())))).ToList();
foreach (var property in foreignKeysList) { #>
    
    private <#= property.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty).FirstCharToLowerCase() #> : <#= property.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) #>View ;
    get <#= property.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty) #>(): <#= property.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) #>View  { return this.<#= property.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty).FirstCharToLowerCase() #>; }
    set <#= property.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty) #>(val: <#= property.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) #>View ) { this.<#= property.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty).FirstCharToLowerCase() #> = val; }
<# } #><# foreach (string file in Table.EntityFiles) { #>
<# XDocument fxmlFile = null; 
try { fxmlFile = XDocument.Load(file); 
if(bool.Parse(fxmlFile.Root.Attributes().Where(s => s.Name == "InActive").FirstOrDefault().Value)) { continue; } 
var tableProperties = fxmlFile.Root.Elements("field")?.Where(s=> bool.Parse(s.Attribute("IsForeignKey").Value) && s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) == Table.Name);
var foreignKeysMulti = tableProperties.Where(s => bool.Parse(s.Attribute("InActive").Value) == false && bool.Parse(s.Attribute("IsDBField").Value) == true && bool.Parse(s.Attribute("IsForeignKey").Value) == true)
                                  .GroupBy(s=> s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty) +"_" +s.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty)).ToList();
var foreignKeysMultiList = (from a in foreignKeysMulti
                       select new XElement(a.Key, new XAttribute("ForeignEntity", a.Select(s=> s.Attribute("ForeignEntity").Value.Replace("\"", string.Empty)).FirstOrDefault()),
                          new XAttribute("NavigationPropertyName", a.Select(s => s.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty)).FirstOrDefault()),
                          new XAttribute("FieldName", string.Join(", ", a.Select(s => s.Attribute("FieldName").Value.Replace("\"", string.Empty)).ToList())))).ToList();
foreach (var prop in foreignKeysMultiList) { #>
    
    private <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #><#= prop.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty).FirstCharToLowerCase() #> : <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>View[] ;
    get <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #><#= prop.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty) #>(): <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>View[]  { return this.<#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #><#= prop.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty).FirstCharToLowerCase() #>; }
    set <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #><#= prop.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty) #>(val: <#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #>View[] ) { this.<#= fxmlFile.Root.Attribute("TableName").Value.Replace("\"", string.Empty) #><#= prop.Attribute("NavigationPropertyName").Value.Replace("\"", string.Empty).FirstCharToLowerCase() #> = val; }
<# } #><#} 
catch (Exception) { continue; } #>
<# } #> 
}

 